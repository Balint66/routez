diff --git a/std/event/net.zig b/std/event/net.zig
index bed665dc..e076dbc9 100644
--- a/std/event/net.zig
+++ b/std/event/net.zig
@@ -41,9 +41,8 @@ pub const Server = struct {
     pub fn listen(
         self: *Server,
         address: *const std.net.Address,
-        handleRequestFn: async fn (*Server, *const std.net.Address, File) void,
+        comptime handleRequestFn: async fn (*Server, *const std.net.Address, File) void,
     ) !void {
-        self.handleRequestFn = handleRequestFn;
 
         const sockfd = try os.socket(os.AF_INET, os.SOCK_STREAM | os.SOCK_CLOEXEC | os.SOCK_NONBLOCK, os.PROTO_tcp);
         errdefer os.close(sockfd);
@@ -53,10 +52,10 @@ pub const Server = struct {
         try os.listen(sockfd, os.SOMAXCONN);
         self.listen_address = std.net.Address.initPosix(try os.getsockname(sockfd));
 
-        self.accept_frame = async Server.handler(self);
-        errdefer await self.accept_frame.?;
+        var accept_frame = async Server.handler(self, handleRequestFn);
+
+        self.listen_resume_node.handle = &accept_frame;
 
-        self.listen_resume_node.handle = self.accept_frame.?;
         try self.loop.linuxAddFd(sockfd, &self.listen_resume_node, os.EPOLLIN | os.EPOLLOUT | os.EPOLLET);
         errdefer self.loop.removeFd(sockfd);
     }
@@ -75,7 +74,10 @@ pub const Server = struct {
         if (self.sockfd) |sockfd| os.close(sockfd);
     }
 
-    pub async fn handler(self: *Server) void {
+    pub async fn handler(
+        self: *Server,
+        comptime handleRequestFn: async fn (*Server, *const std.net.Address, File) void,
+    ) void {
         while (true) {
             var accepted_addr: std.net.Address = undefined;
             // TODO just inline the following function here and don't expose it as posixAsyncAccept
@@ -86,7 +88,7 @@ pub const Server = struct {
                     continue;
                 }
                 var socket = File.openHandle(accepted_fd);
-                self.handleRequestFn(self, &accepted_addr, socket);
+                handleRequestFn(self, &accepted_addr, socket);
             } else |err| switch (err) {
                 error.ProcessFdQuotaExceeded => @panic("TODO handle this error"),
                 error.ConnectionAborted => continue,
